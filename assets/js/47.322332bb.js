(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{533:function(n,s,e){"use strict";e.r(s);var a=e(2),l=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("p",[n._v("在项目业务上表单的需求多变，不同需求也会有不同的表单组合。这部分的开发投入是可以减小的。简单的分析一下，变动的主要是表单控件和逻辑判断。所以首先想到的就是开发一个配置式的表单，设计一个新的表单schema规范。然后根据schema规范编写表单的JSON对象，最后由表单JSON动态生成表单。下面就是一段常用的基于schema的表单JSON代码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('{\n  "type": "input",\n  "propName": "username", // 用于设置传递给后端的字段名称\n  "icon": "text-field",\n  "formItemFlag": true,\n  "options": {\n    //-------------------\n    以下是组件属性\n    "name": "input115643",\n    "label": "input",\n    "labelAlign": "",\n    "type": "text",\n    "defaultValue": "",\n    "placeholder": "",\n    "columnWidth": "200px",\n    "size": "",\n    "labelWidth": null,\n    "labelHidden": false,\n    "readonly": false,\n    "disabled": false,\n    "hidden": false,\n    "clearable": true,\n    "showPassword": false,\n    "required": false,\n    "requiredHint": "",\n    "validation": "",\n    "validationHint": "",\n    "customClass": [],\n    "labelIconClass": null,\n    "labelIconPosition": "rear",\n    "labelTooltip": null,\n    "minLength": null,\n    "maxLength": null,\n    "showWordLimit": false,\n    "prefixIcon": "",\n    "suffixIcon": "",\n    "appendButton": false,\n    "appendButtonDisabled": false,\n    "buttonIcon": "el-icon-search"\n  },\n  "id": "input115643"\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br")])]),s("p",[n._v("但是如果通过传入到表单JSON去渲染组件中这种方案有两个比较明显的缺点：")]),n._v(" "),s("ol",[s("li",[n._v("使用者需要学习schema规范")]),n._v(" "),s("li",[n._v("难于实现复杂的表单交互逻辑")])]),n._v(" "),s("p",[n._v("为了解决第一个schema规范学习成本的问题。可以基于表单schema开发一个拖拽式的表单设计器，这样就可以所见即所得，现在也有很多开源项目实现，form generator、form creator等等的开源项目。但是由于本业务使用的ui框架是Hui(恒生的一套ui框架)，由于ui参数与展示不同所以需要自己搞一套表单设计器。")]),n._v(" "),s("p",[n._v("为了解决第二个问题，如何实现动态表单的复杂交互逻辑，思路为 为动态表单添加可编程接口，即通过组件的交互事件和API方法实现逻辑交互。")]),n._v(" "),s("h3",{attrs:{id:"实现可编程接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现可编程接口"}},[n._v("#")]),n._v(" 实现可编程接口")]),n._v(" "),s("p",[n._v("要实现表单交互逻辑，第一步需要暴露组件交互事件，比如“活动类型”组件点击后出发onChange事件；第二步就是在事件中对组件进行精确控制，比如显示和隐藏某些组件、设置组件必填属性、设置禁用组件等等。")]),n._v(" "),s("p",[n._v("第一步比较简单，只要给schema增加组件的7个自定义事件即可，如下：")]),n._v(" "),s("p",[n._v('{\n"type": "input",\n"propName": "username", // 用于设置传递给后端的字段名称\n"icon": "text-field",\n"formItemFlag": true,\n"options": {\n//-------------------\n以下是组件属性\n"name": "input115643",\n"label": "input",\n"labelAlign": "",\n"type": "text",\n"defaultValue": "",\n"placeholder": "",\n"columnWidth": "200px",\n"size": "",\n"labelWidth": null,\n"labelHidden": false,\n"readonly": false,\n"disabled": false,\n"hidden": false,\n"clearable": true,\n"showPassword": false,\n"required": false,\n"requiredHint": "",\n"validation": "",\n"validationHint": "",\n"customClass": [],\n"labelIconClass": null,\n"labelIconPosition": "rear",\n"labelTooltip": null,\n"minLength": null,\n"maxLength": null,\n"showWordLimit": false,\n"prefixIcon": "",\n"suffixIcon": "",\n"appendButton": false,\n"appendButtonDisabled": false,\n"buttonIcon": "el-icon-search",\n//-------------------\n自定义事件，用于在以下几个出发时机写入自定义的事件\n"onCreated": "",\n"onMounted": "",\n"onInput": "",\n"onChange": "",\n"onFocus": "",\n"onBlur": "",\n"onValidate": ""\n},\n"id": "input115643"\n}')]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("\n代码的编辑选用的是ace-builds这个编辑组件。\n\n\n第二步就是实现组件的操控API方法，这里又分为两步走：\n\n1. 收集表单组件的实例\n2. 调用组件的methods属性中的方法\n\n先给 renderForm 组件增加一个refList的provider属性，在表单组件中inject注入，当每个组件创建时将本组件实例注入到如下：\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[n._v("inject: ['refList'],\ncreated() {\nthis.registerToRefList()\n},\nmethods: {\nregisterToRefList() {\nthis.refList[this.field.options.name] = this\n}\n}")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("如此一来，我们可以通过options.name去获取表单组件实例，从而调用组件的methods属性中的组件方法，组件方法可以任意填充。\n\n实现一个简单的交互事件：\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("p",[n._v("var fieldA = this.getWidgetRef('fieldA')\nvar fieldB = this.getWidgetRef('fieldB')")]),n._v(" "),s("p",[n._v("if (value === 1) {\nfieldA.setHidden(false)\nfieldB.setHidden(true)\n} else {\nfieldA.setHidden(true)\nfieldB.setHidden(false)\n}")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("// fieldMixin.js 这个混入会混入表单组件的公共逻辑\ngetWidgetRef(widgetName, showError) {\nlet foundRef = this.refList[widgetName]\nif (!foundRef && !!showError) {\n// 错误处理\n}\nreturn foundRef\n},\nsetHidden(flag) {\nthis.field.options.hidden = flag")]),n._v(" "),s("p",[n._v("if (flag) {  //清除组件校验规则\nthis.clearFieldRules()\n} else {  //重建组件校验规则\nthis.buildFieldRules()\n}\n},")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("\n自定义事件的执行过程是 通过 Function生成匿名函数，传入指定参数执行。\n\n\n\n\n\n\n\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])])])}),[],!1,null,null,null);s.default=l.exports}}]);